name: ANFL CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check
      
    - name: Lint
      run: npm run lint

    - name: Run unit tests
      run: npm test

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: test-results

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info

  integration:
    name: Integration Tests
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Build test container
      run: docker-compose -f docker-compose.test.yml build

    - name: Run integration tests
      run: docker-compose -f docker-compose.test.yml up --exit-code-from tests

    - name: Upload integration results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-results
        path: test-results/integration

  package:
    name: Package Extension
    needs: [validate, integration]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Package extension
      run: npm run package

    - name: Upload VSIX
      uses: actions/upload-artifact@v3
      with:
        name: vsix-package
        path: '*.vsix'

  release:
    name: Create Release
    needs: package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3

    - name: Download VSIX
      uses: actions/download-artifact@v3
      with:
        name: vsix-package

    - name: Get version
      id: get_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        files: '*.vsix'
        draft: true
        generate_release_notes: true

  notify:
    name: Notify Team
    needs: [validate, integration, package, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check status
      id: status
      run: |
        if [ "${{ needs.validate.result }}" = "success" ] && \
           [ "${{ needs.integration.result }}" = "success" ] && \
           [ "${{ needs.package.result }}" = "success" ] && \
           [ "${{ needs.release.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Send notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: |
          Build Status: ${{ steps.status.outputs.status }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Workflow: ${{ github.workflow }}